/*
 * SPDX-FileCopyrightText: Copyright (c) DELTACAST.TV. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "enum_to_string.hpp"

#include "VideoMasterHD_Core.h"
#include "VideoMasterHD_Sdi.h"

template<>
std::string Deltacast::Helper::enum_to_string(VHD_ERRORCODE value)
{
    switch (value)
    {
    case VHDERR_NOERROR: return "VHDERR_NOERROR";
    case VHDERR_FATALERROR: return "VHDERR_FATALERROR";
    case VHDERR_OPERATIONFAILED: return "VHDERR_OPERATIONFAILED";
    case VHDERR_NOTENOUGHRESOURCE: return "VHDERR_NOTENOUGHRESOURCE";
    case VHDERR_NOTIMPLEMENTED: return "VHDERR_NOTIMPLEMENTED";
    case VHDERR_NOTFOUND: return "VHDERR_NOTFOUND";
    case VHDERR_BADARG: return "VHDERR_BADARG";
    case VHDERR_INVALIDPOINTER: return "VHDERR_INVALIDPOINTER";
    case VHDERR_INVALIDHANDLE: return "VHDERR_INVALIDHANDLE";
    case VHDERR_INVALIDPROPERTY: return "VHDERR_INVALIDPROPERTY";
    case VHDERR_INVALIDSTREAM: return "VHDERR_INVALIDSTREAM";
    case VHDERR_RESOURCELOCKED: return "VHDERR_RESOURCELOCKED";
    case VHDERR_BOARDNOTPRESENT: return "VHDERR_BOARDNOTPRESENT";
    case VHDERR_INCOHERENTBOARDSTATE: return "VHDERR_INCOHERENTBOARDSTATE";
    case VHDERR_INCOHERENTDRIVERSTATE: return "VHDERR_INCOHERENTDRIVERSTATE";
    case VHDERR_INCOHERENTLIBSTATE: return "VHDERR_INCOHERENTLIBSTATE";
    case VHDERR_SETUPLOCKED: return "VHDERR_SETUPLOCKED";
    case VHDERR_CHANNELUSED: return "VHDERR_CHANNELUSED";
    case VHDERR_STREAMUSED: return "VHDERR_STREAMUSED";
    case VHDERR_READONLYPROPERTY: return "VHDERR_READONLYPROPERTY";
    case VHDERR_OFFLINEPROPERTY: return "VHDERR_OFFLINEPROPERTY";
    case VHDERR_TXPROPERTY: return "VHDERR_TXPROPERTY";
    case VHDERR_TIMEOUT: return "VHDERR_TIMEOUT";
    case VHDERR_STREAMNOTRUNNING: return "VHDERR_STREAMNOTRUNNING";
    case VHDERR_BADINPUTSIGNAL: return "VHDERR_BADINPUTSIGNAL";
    case VHDERR_BADREFERENCESIGNAL: return "VHDERR_BADREFERENCESIGNAL";
    case VHDERR_FRAMELOCKED: return "VHDERR_FRAMELOCKED";
    case VHDERR_FRAMEUNLOCKED: return "VHDERR_FRAMEUNLOCKED";
    case VHDERR_INCOMPATIBLESYSTEM: return "VHDERR_INCOMPATIBLESYSTEM";
    case VHDERR_ANCLINEISEMPTY: return "VHDERR_ANCLINEISEMPTY";
    case VHDERR_ANCLINEISFULL: return "VHDERR_ANCLINEISFULL";
    case VHDERR_BUFFERTOOSMALL: return "VHDERR_BUFFERTOOSMALL";
    case VHDERR_BADANC: return "VHDERR_BADANC";
    case VHDERR_BADCONFIG: return "VHDERR_BADCONFIG";
    case VHDERR_FIRMWAREMISMATCH: return "VHDERR_FIRMWAREMISMATCH";
    case VHDERR_LIBRARYMISMATCH: return "VHDERR_LIBRARYMISMATCH";
    case VHDERR_FAILSAFE: return "VHDERR_FAILSAFE";
    case VHDERR_RXPROPERTY: return "VHDERR_RXPROPERTY";
    case VHDERR_ALREADYINITIALIZED: return "VHDERR_ALREADYINITIALIZED";
    case VHDERR_NOTINITIALIZED: return "VHDERR_NOTINITIALIZED";
    case VHDERR_CROSSTHREAD: return "VHDERR_CROSSTHREAD";
    case VHDERR_INCOHERENTDATA: return "VHDERR_INCOHERENTDATA";
    case VHDERR_BADSIZE: return "VHDERR_BADSIZE";
    case VHDERR_WAKEUP: return "VHDERR_WAKEUP";
    case VHDERR_DEVICE_REMOVED: return "VHDERR_DEVICE_REMOVED";
    case VHDERR_DATANOTREADY: return "VHDERR_DATANOTREADY";
    case VHDERR_NOSFPMODULE_DEPRECATED: return "VHDERR_NOSFPMODULE_DEPRECATED";
    case VHDERR_SFPMODULELOCKED_DEPRECATED: return "VHDERR_SFPMODULELOCKED_DEPRECATED";
    case VHDERR_INVALIDTABLE_DEPRECATED: return "VHDERR_INVALIDTABLE_DEPRECATED";
    case VHDERR_TEMPERATURETOOHIGH: return "VHDERR_TEMPERATURETOOHIGH";
    case VHDERR_LTCSOURCEUNLOCKED: return "VHDERR_LTCSOURCEUNLOCKED";
    case VHDERR_INVALIDACCESSRIGHT: return "VHDERR_INVALIDACCESSRIGHT";
    case VHDERR_LICENSERESTRICTION_DEPRECATED: return "VHDERR_LICENSERESTRICTION_DEPRECATED";
    case VHDERR_SOFTWAREPROTECTION_FAILURE_DEPRECATED: return "VHDERR_SOFTWAREPROTECTION_FAILURE_DEPRECATED";
    case VHDERR_SOFTWAREPROTECTION_IDNOTFOUND_DEPRECATED: return "VHDERR_SOFTWAREPROTECTION_IDNOTFOUND_DEPRECATED";
    case VHDERR_SOFTWAREPROTECTION_BADLICENSEINFO_DEPRECATED: return "VHDERR_SOFTWAREPROTECTION_BADLICENSEINFO_DEPRECATED";
    case VHDERR_SOFTWAREPROTECTION_UNAUTHORIZEDHOST_DEPRECATED: return "VHDERR_SOFTWAREPROTECTION_UNAUTHORIZEDHOST_DEPRECATED";
    case VHDERR_SOFTWAREPROTECTION_STREAMSTARTED_DEPRECATED: return "VHDERR_SOFTWAREPROTECTION_STREAMSTARTED_DEPRECATED";
    case VHDERR_BAD_PARITY: return "VHDERR_BAD_PARITY";
    case VHDERR_INVALIDCAPABILITY: return "VHDERR_INVALIDCAPABILITY";
    case VHDERR_DEPRECATED: return "VHDERR_DEPRECATED";
    case VHDERR_DEVICENEEDSRESTART: return "VHDERR_DEVICENEEDSRESTART";
    case VHDERR_FWUPDATEINPROGRESS: return "VHDERR_FWUPDATEINPROGRESS";
    case VHDERR_NOMOREDATATOPROCESS: return "VHDERR_NOMOREDATATOPROCESS";
    case VHDERR_NOTSUPPORTED: return "VHDERR_NOTSUPPORTED";
    default: return "unknown";
    }
}

template<>
std::string Deltacast::Helper::enum_to_string(VHD_CLOCKDIVISOR value)
{
    switch (value)
    {
    case VHD_CLOCKDIV_1: return "VHD_CLOCKDIV_1";
    case VHD_CLOCKDIV_1001: return "VHD_CLOCKDIV_1001";
    default: return "unknown";
    }
}

template<>
std::string Deltacast::Helper::enum_to_string(VHD_INTERFACE value)
{
    switch (value)
    {
    case VHD_INTERFACE_SD_259: return "VHD_INTERFACE_SD_259";
    case VHD_INTERFACE_HD_292_1: return "VHD_INTERFACE_HD_292_1";
    case VHD_INTERFACE_HD_DUAL: return "VHD_INTERFACE_HD_DUAL";
    case VHD_INTERFACE_3G_A_425_1: return "VHD_INTERFACE_3G_A_425_1";
    case VHD_INTERFACE_4XHD_QUADRANT: return "VHD_INTERFACE_4XHD_QUADRANT";
    case VHD_INTERFACE_4X3G_A_QUADRANT: return "VHD_INTERFACE_4X3G_A_QUADRANT";
    case VHD_INTERFACE_SD_DUAL: return "VHD_INTERFACE_SD_DUAL";
    case VHD_INTERFACE_3G_A_DUAL: return "VHD_INTERFACE_3G_A_DUAL";
    case VHD_INTERFACE_3G_B_DL_425_1: return "VHD_INTERFACE_3G_B_DL_425_1";
    case VHD_INTERFACE_4X3G_B_DL_QUADRANT: return "VHD_INTERFACE_4X3G_B_DL_QUADRANT";
    case VHD_INTERFACE_2X3G_B_DS_425_3: return "VHD_INTERFACE_2X3G_B_DS_425_3";
    case VHD_INTERFACE_4X3G_A_425_5: return "VHD_INTERFACE_4X3G_A_425_5";
    case VHD_INTERFACE_4X3G_B_DL_425_5: return "VHD_INTERFACE_4X3G_B_DL_425_5";
    case VHD_INTERFACE_3G_B_DL_425_1_DUAL: return "VHD_INTERFACE_3G_B_DL_425_1_DUAL";
    case VHD_INTERFACE_2X3G_B_DS_425_3_DUAL: return "VHD_INTERFACE_2X3G_B_DS_425_3_DUAL";
    case VHD_INTERFACE_4XHD_QUADRANT_DUAL: return "VHD_INTERFACE_4XHD_QUADRANT_DUAL";
    case VHD_INTERFACE_4X3G_A_QUADRANT_DUAL: return "VHD_INTERFACE_4X3G_A_QUADRANT_DUAL";
    case VHD_INTERFACE_4X3G_A_425_5_DUAL: return "VHD_INTERFACE_4X3G_A_425_5_DUAL";
    case VHD_INTERFACE_4X3G_B_DL_QUADRANT_DUAL: return "VHD_INTERFACE_4X3G_B_DL_QUADRANT_DUAL";
    case VHD_INTERFACE_4X3G_B_DL_425_5_DUAL: return "VHD_INTERFACE_4X3G_B_DL_425_5_DUAL";
    case VHD_INTERFACE_TICO_3G_A_425_1: return "VHD_INTERFACE_TICO_3G_A_425_1";
    case VHD_INTERFACE_TICO_HD_292_1: return "VHD_INTERFACE_TICO_HD_292_1";
    case VHD_INTERFACE_6G_2081_10: return "VHD_INTERFACE_6G_2081_10";
    case VHD_INTERFACE_12G_2082_10: return "VHD_INTERFACE_12G_2082_10";
    case VHD_INTERFACE_3G_B_DS_425_1: return "VHD_INTERFACE_3G_B_DS_425_1";
    case VHD_INTERFACE_4X6G_2081_10_QUADRANT: return "VHD_INTERFACE_4X6G_2081_10_QUADRANT";
    case VHD_INTERFACE_4X12G_2082_10_QUADRANT: return "VHD_INTERFACE_4X12G_2082_10_QUADRANT";
    case VHD_INTERFACE_6G_2081_10_DUAL: return "VHD_INTERFACE_6G_2081_10_DUAL";
    case VHD_INTERFACE_12G_2082_10_DUAL: return "VHD_INTERFACE_12G_2082_10_DUAL";
    case VHD_INTERFACE_4X6G_2081_12: return "VHD_INTERFACE_4X6G_2081_12";
    case VHD_INTERFACE_4X12G_2082_12: return "VHD_INTERFACE_4X12G_2082_12";
    default: return "unknown";
    }
}

template<>
std::string Deltacast::Helper::enum_to_string(VHD_VIDEOSTANDARD value)
{
    switch (value)
    {
    case VHD_VIDEOSTD_S274M_1080p_25Hz: return "VHD_VIDEOSTD_S274M_1080p_25Hz";
    case VHD_VIDEOSTD_S274M_1080p_30Hz: return "VHD_VIDEOSTD_S274M_1080p_30Hz";
    case VHD_VIDEOSTD_S274M_1080i_50Hz: return "VHD_VIDEOSTD_S274M_1080i_50Hz";
    case VHD_VIDEOSTD_S274M_1080i_60Hz: return "VHD_VIDEOSTD_S274M_1080i_60Hz";
    case VHD_VIDEOSTD_S296M_720p_50Hz: return "VHD_VIDEOSTD_S296M_720p_50Hz";
    case VHD_VIDEOSTD_S296M_720p_60Hz: return "VHD_VIDEOSTD_S296M_720p_60Hz";
    case VHD_VIDEOSTD_S259M_PAL: return "VHD_VIDEOSTD_S259M_PAL";
    case VHD_VIDEOSTD_S259M_NTSC_487: return "VHD_VIDEOSTD_S259M_NTSC_487";
    case VHD_VIDEOSTD_S274M_1080p_24Hz: return "VHD_VIDEOSTD_S274M_1080p_24Hz";
    case VHD_VIDEOSTD_S274M_1080p_60Hz: return "VHD_VIDEOSTD_S274M_1080p_60Hz";
    case VHD_VIDEOSTD_S274M_1080p_50Hz: return "VHD_VIDEOSTD_S274M_1080p_50Hz";
    case VHD_VIDEOSTD_S274M_1080psf_24Hz: return "VHD_VIDEOSTD_S274M_1080psf_24Hz";
    case VHD_VIDEOSTD_S274M_1080psf_25Hz: return "VHD_VIDEOSTD_S274M_1080psf_25Hz";
    case VHD_VIDEOSTD_S274M_1080psf_30Hz: return "VHD_VIDEOSTD_S274M_1080psf_30Hz";
    case VHD_VIDEOSTD_S296M_720p_24Hz: return "VHD_VIDEOSTD_S296M_720p_24Hz";
    case VHD_VIDEOSTD_S296M_720p_25Hz: return "VHD_VIDEOSTD_S296M_720p_25Hz";
    case VHD_VIDEOSTD_S296M_720p_30Hz: return "VHD_VIDEOSTD_S296M_720p_30Hz";
    case VHD_VIDEOSTD_S2048M_2048p_24Hz: return "VHD_VIDEOSTD_S2048M_2048p_24Hz";
    case VHD_VIDEOSTD_S2048M_2048p_25Hz: return "VHD_VIDEOSTD_S2048M_2048p_25Hz";
    case VHD_VIDEOSTD_S2048M_2048p_30Hz: return "VHD_VIDEOSTD_S2048M_2048p_30Hz";
    case VHD_VIDEOSTD_S2048M_2048psf_24Hz: return "VHD_VIDEOSTD_S2048M_2048psf_24Hz";
    case VHD_VIDEOSTD_S2048M_2048psf_25Hz: return "VHD_VIDEOSTD_S2048M_2048psf_25Hz";
    case VHD_VIDEOSTD_S2048M_2048psf_30Hz: return "VHD_VIDEOSTD_S2048M_2048psf_30Hz";
    case VHD_VIDEOSTD_S2048M_2048p_60Hz: return "VHD_VIDEOSTD_S2048M_2048p_60Hz";
    case VHD_VIDEOSTD_S2048M_2048p_50Hz: return "VHD_VIDEOSTD_S2048M_2048p_50Hz";
    case VHD_VIDEOSTD_S2048M_2048p_48Hz: return "VHD_VIDEOSTD_S2048M_2048p_48Hz";
    case VHD_VIDEOSTD_3840x2160p_24Hz: return "VHD_VIDEOSTD_3840x2160p_24Hz";
    case VHD_VIDEOSTD_3840x2160p_25Hz: return "VHD_VIDEOSTD_3840x2160p_25Hz";
    case VHD_VIDEOSTD_3840x2160p_30Hz: return "VHD_VIDEOSTD_3840x2160p_30Hz";
    case VHD_VIDEOSTD_3840x2160p_50Hz: return "VHD_VIDEOSTD_3840x2160p_50Hz";
    case VHD_VIDEOSTD_3840x2160p_60Hz: return "VHD_VIDEOSTD_3840x2160p_60Hz";
    case VHD_VIDEOSTD_4096x2160p_24Hz: return "VHD_VIDEOSTD_4096x2160p_24Hz";
    case VHD_VIDEOSTD_4096x2160p_25Hz: return "VHD_VIDEOSTD_4096x2160p_25Hz";
    case VHD_VIDEOSTD_4096x2160p_30Hz: return "VHD_VIDEOSTD_4096x2160p_30Hz";
    case VHD_VIDEOSTD_4096x2160p_48Hz: return "VHD_VIDEOSTD_4096x2160p_48Hz";
    case VHD_VIDEOSTD_4096x2160p_50Hz: return "VHD_VIDEOSTD_4096x2160p_50Hz";
    case VHD_VIDEOSTD_4096x2160p_60Hz: return "VHD_VIDEOSTD_4096x2160p_60Hz";
    case VHD_VIDEOSTD_S259M_NTSC_480: return "VHD_VIDEOSTD_S259M_NTSC_480";
    case VHD_VIDEOSTD_7680x4320p_24Hz: return "VHD_VIDEOSTD_7680x4320p_24Hz";
    case VHD_VIDEOSTD_7680x4320p_25Hz: return "VHD_VIDEOSTD_7680x4320p_25Hz";
    case VHD_VIDEOSTD_7680x4320p_30Hz: return "VHD_VIDEOSTD_7680x4320p_30Hz";
    case VHD_VIDEOSTD_7680x4320p_50Hz: return "VHD_VIDEOSTD_7680x4320p_50Hz";
    case VHD_VIDEOSTD_7680x4320p_60Hz: return "VHD_VIDEOSTD_7680x4320p_60Hz";
    case VHD_VIDEOSTD_3840x2160psf_24Hz: return "VHD_VIDEOSTD_3840x2160psf_24Hz";
    case VHD_VIDEOSTD_3840x2160psf_25Hz: return "VHD_VIDEOSTD_3840x2160psf_25Hz";
    case VHD_VIDEOSTD_3840x2160psf_30Hz: return "VHD_VIDEOSTD_3840x2160psf_30Hz";
    case VHD_VIDEOSTD_4096x2160psf_24Hz: return "VHD_VIDEOSTD_4096x2160psf_24Hz";
    case VHD_VIDEOSTD_4096x2160psf_25Hz: return "VHD_VIDEOSTD_4096x2160psf_25Hz";
    case VHD_VIDEOSTD_4096x2160psf_30Hz: return "VHD_VIDEOSTD_4096x2160psf_30Hz";
    case VHD_VIDEOSTD_8192x4320p_24Hz: return "VHD_VIDEOSTD_8192x4320p_24Hz";
    case VHD_VIDEOSTD_8192x4320p_25Hz: return "VHD_VIDEOSTD_8192x4320p_25Hz";
    case VHD_VIDEOSTD_8192x4320p_30Hz: return "VHD_VIDEOSTD_8192x4320p_30Hz";
    case VHD_VIDEOSTD_8192x4320p_48Hz: return "VHD_VIDEOSTD_8192x4320p_48Hz";
    case VHD_VIDEOSTD_8192x4320p_50Hz: return "VHD_VIDEOSTD_8192x4320p_50Hz";
    case VHD_VIDEOSTD_8192x4320p_60Hz: return "VHD_VIDEOSTD_8192x4320p_60Hz";
    default: return "unknown";
    }
}
